/*
 * WoRMS REST webservice
 * The definitions and operations are listed below. Click on an operation name to view it's details, and test it.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.marinespecies.aphia.v1_0.api;

import org.marinespecies.aphia.v1_0.handler.ApiCallback;
import org.marinespecies.aphia.v1_0.handler.ApiClient;
import org.marinespecies.aphia.v1_0.handler.ApiException;
import org.marinespecies.aphia.v1_0.handler.ApiResponse;
import org.marinespecies.aphia.v1_0.handler.Configuration;
import org.marinespecies.aphia.v1_0.handler.Pair;
import org.marinespecies.aphia.v1_0.handler.ProgressRequestBody;
import org.marinespecies.aphia.v1_0.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.marinespecies.aphia.v1_0.model.AphiaRank;
import org.marinespecies.aphia.v1_0.model.AphiaRecord;
import org.marinespecies.aphia.v1_0.model.AphiaRecordsArray;
import org.marinespecies.aphia.v1_0.model.Classification;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * <p>TaxonomicDataApi class.</p>
 *
 * @author mole
 * @version $Id: $Id
 */
public class TaxonomicDataApi {
    private ApiClient apiClient;

    /**
     * <p>Constructor for TaxonomicDataApi.</p>
     */
    public TaxonomicDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    /**
     * <p>Constructor for TaxonomicDataApi.</p>
     *
     * @param apiClient a {@link org.marinespecies.aphia.v1_0.handler.ApiClient} object.
     */
    public TaxonomicDataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * <p>Getter for the field <code>apiClient</code>.</p>
     *
     * @return a {@link org.marinespecies.aphia.v1_0.handler.ApiClient} object.
     */
    public ApiClient getApiClient() {
        return apiClient;
    }

    /**
     * <p>Setter for the field <code>apiClient</code>.</p>
     *
     * @param apiClient a {@link org.marinespecies.aphia.v1_0.handler.ApiClient} object.
     */
    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for aphiaChildrenByAphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aphiaChildrenByAphiaIDCall(Integer ID, Boolean marineOnly, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/AphiaChildrenByAphiaID/{ID}"
            .replaceAll("\\{" + "ID" + "\\}", apiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marineOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marine_only", marineOnly));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aphiaChildrenByAphiaIDValidateBeforeCall(Integer ID, Boolean marineOnly, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling aphiaChildrenByAphiaID(Async)");
        }
        
        com.squareup.okhttp.Call call = aphiaChildrenByAphiaIDCall(ID, marineOnly, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the direct children (max. 50) for a given AphiaID
     * Get the direct children (max. 50) for a given AphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return List&lt;AphiaRecord&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecord> aphiaChildrenByAphiaID(Integer ID, Boolean marineOnly, Integer offset) throws ApiException {
        ApiResponse<List<AphiaRecord>> resp = aphiaChildrenByAphiaIDWithHttpInfo(ID, marineOnly, offset);
        return resp.getData();
    }

    /**
     * Get the direct children (max. 50) for a given AphiaID
     * Get the direct children (max. 50) for a given AphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;AphiaRecord&gt;&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecord>> aphiaChildrenByAphiaIDWithHttpInfo(Integer ID, Boolean marineOnly, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = aphiaChildrenByAphiaIDValidateBeforeCall(ID, marineOnly, offset, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the direct children (max. 50) for a given AphiaID (asynchronously)
     * Get the direct children (max. 50) for a given AphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aphiaChildrenByAphiaIDAsync(Integer ID, Boolean marineOnly, Integer offset, final ApiCallback<List<AphiaRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aphiaChildrenByAphiaIDValidateBeforeCall(ID, marineOnly, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaClassificationByAphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aphiaClassificationByAphiaIDCall(Integer ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/AphiaClassificationByAphiaID/{ID}"
            .replaceAll("\\{" + "ID" + "\\}", apiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aphiaClassificationByAphiaIDValidateBeforeCall(Integer ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling aphiaClassificationByAphiaID(Async)");
        }
        
        com.squareup.okhttp.Call call = aphiaClassificationByAphiaIDCall(ID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the complete classification for one taxon. This also includes any sub or super ranks.
     * Get the complete classification for one taxon. This also includes any sub or super ranks.
     *
     * @param ID The AphiaID to search for (required)
     * @return Classification
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Classification aphiaClassificationByAphiaID(Integer ID) throws ApiException {
        ApiResponse<Classification> resp = aphiaClassificationByAphiaIDWithHttpInfo(ID);
        return resp.getData();
    }

    /**
     * Get the complete classification for one taxon. This also includes any sub or super ranks.
     * Get the complete classification for one taxon. This also includes any sub or super ranks.
     *
     * @param ID The AphiaID to search for (required)
     * @return ApiResponse&lt;Classification&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Classification> aphiaClassificationByAphiaIDWithHttpInfo(Integer ID) throws ApiException {
        com.squareup.okhttp.Call call = aphiaClassificationByAphiaIDValidateBeforeCall(ID, null, null);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the complete classification for one taxon. This also includes any sub or super ranks. (asynchronously)
     * Get the complete classification for one taxon. This also includes any sub or super ranks.
     *
     * @param ID The AphiaID to search for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aphiaClassificationByAphiaIDAsync(Integer ID, final ApiCallback<Classification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aphiaClassificationByAphiaIDValidateBeforeCall(ID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaIDByName
     *
     * @param scientificName Name to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aphiaIDByNameCall(String scientificName, Boolean marineOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/AphiaIDByName/{ScientificName}"
            .replaceAll("\\{" + "ScientificName" + "\\}", apiClient.escapeString(scientificName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marineOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marine_only", marineOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aphiaIDByNameValidateBeforeCall(String scientificName, Boolean marineOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scientificName' is set
        if (scientificName == null) {
            throw new ApiException("Missing the required parameter 'scientificName' when calling aphiaIDByName(Async)");
        }
        
        com.squareup.okhttp.Call call = aphiaIDByNameCall(scientificName, marineOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the AphiaID for a given name.
     * Get the AphiaID for a given name.  Output: NULL when no match is found; -999 when multiple matches are found; an integer (AphiaID) when one exact match was found
     *
     * @param scientificName Name to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @return Integer
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer aphiaIDByName(String scientificName, Boolean marineOnly) throws ApiException {
        ApiResponse<Integer> resp = aphiaIDByNameWithHttpInfo(scientificName, marineOnly);
        return resp.getData();
    }

    /**
     * Get the AphiaID for a given name.
     * Get the AphiaID for a given name.  Output: NULL when no match is found; -999 when multiple matches are found; an integer (AphiaID) when one exact match was found
     *
     * @param scientificName Name to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @return ApiResponse&lt;Integer&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> aphiaIDByNameWithHttpInfo(String scientificName, Boolean marineOnly) throws ApiException {
        com.squareup.okhttp.Call call = aphiaIDByNameValidateBeforeCall(scientificName, marineOnly, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the AphiaID for a given name. (asynchronously)
     * Get the AphiaID for a given name.  Output: NULL when no match is found; -999 when multiple matches are found; an integer (AphiaID) when one exact match was found
     *
     * @param scientificName Name to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aphiaIDByNameAsync(String scientificName, Boolean marineOnly, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aphiaIDByNameValidateBeforeCall(scientificName, marineOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaNameByAphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aphiaNameByAphiaIDCall(Integer ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/AphiaNameByAphiaID/{ID}"
            .replaceAll("\\{" + "ID" + "\\}", apiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aphiaNameByAphiaIDValidateBeforeCall(Integer ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling aphiaNameByAphiaID(Async)");
        }
        
        com.squareup.okhttp.Call call = aphiaNameByAphiaIDCall(ID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the name for a given AphiaID
     * Get the name for a given AphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @return Integer
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer aphiaNameByAphiaID(Integer ID) throws ApiException {
        ApiResponse<Integer> resp = aphiaNameByAphiaIDWithHttpInfo(ID);
        return resp.getData();
    }

    /**
     * Get the name for a given AphiaID
     * Get the name for a given AphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> aphiaNameByAphiaIDWithHttpInfo(Integer ID) throws ApiException {
        com.squareup.okhttp.Call call = aphiaNameByAphiaIDValidateBeforeCall(ID, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the name for a given AphiaID (asynchronously)
     * Get the name for a given AphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aphiaNameByAphiaIDAsync(Integer ID, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aphiaNameByAphiaIDValidateBeforeCall(ID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaRecordByAphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aphiaRecordByAphiaIDCall(Integer ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/AphiaRecordByAphiaID/{ID}"
            .replaceAll("\\{" + "ID" + "\\}", apiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aphiaRecordByAphiaIDValidateBeforeCall(Integer ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling aphiaRecordByAphiaID(Async)");
        }
        
        com.squareup.okhttp.Call call = aphiaRecordByAphiaIDCall(ID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the complete AphiaRecord for a given AphiaID
     * Get the complete AphiaRecord for a given AphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @return AphiaRecord
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AphiaRecord aphiaRecordByAphiaID(Integer ID) throws ApiException {
        ApiResponse<AphiaRecord> resp = aphiaRecordByAphiaIDWithHttpInfo(ID);
        return resp.getData();
    }

    /**
     * Get the complete AphiaRecord for a given AphiaID
     * Get the complete AphiaRecord for a given AphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @return ApiResponse&lt;AphiaRecord&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AphiaRecord> aphiaRecordByAphiaIDWithHttpInfo(Integer ID) throws ApiException {
        com.squareup.okhttp.Call call = aphiaRecordByAphiaIDValidateBeforeCall(ID, null, null);
        Type localVarReturnType = new TypeToken<AphiaRecord>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the complete AphiaRecord for a given AphiaID (asynchronously)
     * Get the complete AphiaRecord for a given AphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aphiaRecordByAphiaIDAsync(Integer ID, final ApiCallback<AphiaRecord> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aphiaRecordByAphiaIDValidateBeforeCall(ID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AphiaRecord>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaRecordsByAphiaIDs
     *
     * @param aphiaids The AphiaIDs to search for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aphiaRecordsByAphiaIDsCall(List<Integer> aphiaids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/AphiaRecordsByAphiaIDs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aphiaids != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "aphiaids[]", aphiaids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aphiaRecordsByAphiaIDsValidateBeforeCall(List<Integer> aphiaids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'aphiaids' is set
        if (aphiaids == null) {
            throw new ApiException("Missing the required parameter 'aphiaids' when calling aphiaRecordsByAphiaIDs(Async)");
        }
        
        com.squareup.okhttp.Call call = aphiaRecordsByAphiaIDsCall(aphiaids, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an AphiaRecord for multiple AphiaIDs in one go (max: 50)
     * Get an AphiaRecord for multiple AphiaIDs in one go (max: 50)
     *
     * @param aphiaids The AphiaIDs to search for (required)
     * @return List&lt;AphiaRecord&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecord> aphiaRecordsByAphiaIDs(List<Integer> aphiaids) throws ApiException {
        ApiResponse<List<AphiaRecord>> resp = aphiaRecordsByAphiaIDsWithHttpInfo(aphiaids);
        return resp.getData();
    }

    /**
     * Get an AphiaRecord for multiple AphiaIDs in one go (max: 50)
     * Get an AphiaRecord for multiple AphiaIDs in one go (max: 50)
     *
     * @param aphiaids The AphiaIDs to search for (required)
     * @return ApiResponse&lt;List&lt;AphiaRecord&gt;&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecord>> aphiaRecordsByAphiaIDsWithHttpInfo(List<Integer> aphiaids) throws ApiException {
        com.squareup.okhttp.Call call = aphiaRecordsByAphiaIDsValidateBeforeCall(aphiaids, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an AphiaRecord for multiple AphiaIDs in one go (max: 50) (asynchronously)
     * Get an AphiaRecord for multiple AphiaIDs in one go (max: 50)
     *
     * @param aphiaids The AphiaIDs to search for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aphiaRecordsByAphiaIDsAsync(List<Integer> aphiaids, final ApiCallback<List<AphiaRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aphiaRecordsByAphiaIDsValidateBeforeCall(aphiaids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaRecordsByDate
     *
     * @param startdate ISO 8601 formatted start date(time). Default&#x3D;today(). i.e. 2022-02-02T01:21:53+00:00 (required)
     * @param enddate ISO 8601 formatted end date(time). Default&#x3D;today().i.e. 2022-02-02T01:21:53+00:00 (optional)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aphiaRecordsByDateCall(OffsetDateTime startdate, OffsetDateTime enddate, Boolean marineOnly, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/AphiaRecordsByDate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startdate", startdate));
        if (enddate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enddate", enddate));
        if (marineOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marine_only", marineOnly));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aphiaRecordsByDateValidateBeforeCall(OffsetDateTime startdate, OffsetDateTime enddate, Boolean marineOnly, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'startdate' is set
        if (startdate == null) {
            throw new ApiException("Missing the required parameter 'startdate' when calling aphiaRecordsByDate(Async)");
        }
        
        com.squareup.okhttp.Call call = aphiaRecordsByDateCall(startdate, enddate, marineOnly, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lists all AphiaRecords (taxa) that have their last edit action (modified or added) during the specified period
     * Lists all AphiaRecords (taxa) that have their last edit action (modified or added) during the specified period
     *
     * @param startdate ISO 8601 formatted start date(time). Default&#x3D;today(). i.e. 2022-02-02T01:21:53+00:00 (required)
     * @param enddate ISO 8601 formatted end date(time). Default&#x3D;today().i.e. 2022-02-02T01:21:53+00:00 (optional)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return List&lt;AphiaRecord&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecord> aphiaRecordsByDate(OffsetDateTime startdate, OffsetDateTime enddate, Boolean marineOnly, Integer offset) throws ApiException {
        ApiResponse<List<AphiaRecord>> resp = aphiaRecordsByDateWithHttpInfo(startdate, enddate, marineOnly, offset);
        return resp.getData();
    }

    /**
     * Lists all AphiaRecords (taxa) that have their last edit action (modified or added) during the specified period
     * Lists all AphiaRecords (taxa) that have their last edit action (modified or added) during the specified period
     *
     * @param startdate ISO 8601 formatted start date(time). Default&#x3D;today(). i.e. 2022-02-02T01:21:53+00:00 (required)
     * @param enddate ISO 8601 formatted end date(time). Default&#x3D;today().i.e. 2022-02-02T01:21:53+00:00 (optional)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;AphiaRecord&gt;&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecord>> aphiaRecordsByDateWithHttpInfo(OffsetDateTime startdate, OffsetDateTime enddate, Boolean marineOnly, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = aphiaRecordsByDateValidateBeforeCall(startdate, enddate, marineOnly, offset, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all AphiaRecords (taxa) that have their last edit action (modified or added) during the specified period (asynchronously)
     * Lists all AphiaRecords (taxa) that have their last edit action (modified or added) during the specified period
     *
     * @param startdate ISO 8601 formatted start date(time). Default&#x3D;today(). i.e. 2022-02-02T01:21:53+00:00 (required)
     * @param enddate ISO 8601 formatted end date(time). Default&#x3D;today().i.e. 2022-02-02T01:21:53+00:00 (optional)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aphiaRecordsByDateAsync(OffsetDateTime startdate, OffsetDateTime enddate, Boolean marineOnly, Integer offset, final ApiCallback<List<AphiaRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aphiaRecordsByDateValidateBeforeCall(startdate, enddate, marineOnly, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaRecordsByMatchNames
     *
     * @param scientificnames Names to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aphiaRecordsByMatchNamesCall(List<String> scientificnames, Boolean marineOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/AphiaRecordsByMatchNames";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scientificnames != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "scientificnames[]", scientificnames));
        if (marineOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marine_only", marineOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aphiaRecordsByMatchNamesValidateBeforeCall(List<String> scientificnames, Boolean marineOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scientificnames' is set
        if (scientificnames == null) {
            throw new ApiException("Missing the required parameter 'scientificnames' when calling aphiaRecordsByMatchNames(Async)");
        }
        
        com.squareup.okhttp.Call call = aphiaRecordsByMatchNamesCall(scientificnames, marineOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Try to find AphiaRecords using the TAXAMATCH fuzzy matching algorithm by Tony Rees
     * For each given scientific name (may include authority), try to find one or more AphiaRecords, using the TAXAMATCH fuzzy matching algorithm by Tony Rees.&lt;br/&gt;This allows you to (fuzzy) match multiple names in one call. Limited to 50 names at once for performance reasons
     *
     * @param scientificnames Names to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @return List&lt;AphiaRecordsArray&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecordsArray> aphiaRecordsByMatchNames(List<String> scientificnames, Boolean marineOnly) throws ApiException {
        ApiResponse<List<AphiaRecordsArray>> resp = aphiaRecordsByMatchNamesWithHttpInfo(scientificnames, marineOnly);
        return resp.getData();
    }

    /**
     * Try to find AphiaRecords using the TAXAMATCH fuzzy matching algorithm by Tony Rees
     * For each given scientific name (may include authority), try to find one or more AphiaRecords, using the TAXAMATCH fuzzy matching algorithm by Tony Rees.&lt;br/&gt;This allows you to (fuzzy) match multiple names in one call. Limited to 50 names at once for performance reasons
     *
     * @param scientificnames Names to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @return ApiResponse&lt;List&lt;AphiaRecordsArray&gt;&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecordsArray>> aphiaRecordsByMatchNamesWithHttpInfo(List<String> scientificnames, Boolean marineOnly) throws ApiException {
        com.squareup.okhttp.Call call = aphiaRecordsByMatchNamesValidateBeforeCall(scientificnames, marineOnly, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecordsArray>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Try to find AphiaRecords using the TAXAMATCH fuzzy matching algorithm by Tony Rees (asynchronously)
     * For each given scientific name (may include authority), try to find one or more AphiaRecords, using the TAXAMATCH fuzzy matching algorithm by Tony Rees.&lt;br/&gt;This allows you to (fuzzy) match multiple names in one call. Limited to 50 names at once for performance reasons
     *
     * @param scientificnames Names to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aphiaRecordsByMatchNamesAsync(List<String> scientificnames, Boolean marineOnly, final ApiCallback<List<AphiaRecordsArray>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aphiaRecordsByMatchNamesValidateBeforeCall(scientificnames, marineOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecordsArray>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaRecordsByName
     *
     * @param scientificName Name to search for (required)
     * @param like Add a &#x27;%&#x27;-sign added after the ScientificName (SQL LIKE function). Default&#x3D;true (optional, default to true)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aphiaRecordsByNameCall(String scientificName, Boolean like, Boolean marineOnly, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/AphiaRecordsByName/{ScientificName}"
            .replaceAll("\\{" + "ScientificName" + "\\}", apiClient.escapeString(scientificName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (like != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("like", like));
        if (marineOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marine_only", marineOnly));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aphiaRecordsByNameValidateBeforeCall(String scientificName, Boolean like, Boolean marineOnly, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scientificName' is set
        if (scientificName == null) {
            throw new ApiException("Missing the required parameter 'scientificName' when calling aphiaRecordsByName(Async)");
        }
        
        com.squareup.okhttp.Call call = aphiaRecordsByNameCall(scientificName, like, marineOnly, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get one or more matching (max. 50) AphiaRecords for a given name
     * Get one or more matching (max. 50) AphiaRecords for a given name
     *
     * @param scientificName Name to search for (required)
     * @param like Add a &#x27;%&#x27;-sign added after the ScientificName (SQL LIKE function). Default&#x3D;true (optional, default to true)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return List&lt;AphiaRecord&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecord> aphiaRecordsByName(String scientificName, Boolean like, Boolean marineOnly, Integer offset) throws ApiException {
        ApiResponse<List<AphiaRecord>> resp = aphiaRecordsByNameWithHttpInfo(scientificName, like, marineOnly, offset);
        return resp.getData();
    }

    /**
     * Get one or more matching (max. 50) AphiaRecords for a given name
     * Get one or more matching (max. 50) AphiaRecords for a given name
     *
     * @param scientificName Name to search for (required)
     * @param like Add a &#x27;%&#x27;-sign added after the ScientificName (SQL LIKE function). Default&#x3D;true (optional, default to true)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;AphiaRecord&gt;&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecord>> aphiaRecordsByNameWithHttpInfo(String scientificName, Boolean like, Boolean marineOnly, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = aphiaRecordsByNameValidateBeforeCall(scientificName, like, marineOnly, offset, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get one or more matching (max. 50) AphiaRecords for a given name (asynchronously)
     * Get one or more matching (max. 50) AphiaRecords for a given name
     *
     * @param scientificName Name to search for (required)
     * @param like Add a &#x27;%&#x27;-sign added after the ScientificName (SQL LIKE function). Default&#x3D;true (optional, default to true)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aphiaRecordsByNameAsync(String scientificName, Boolean like, Boolean marineOnly, Integer offset, final ApiCallback<List<AphiaRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aphiaRecordsByNameValidateBeforeCall(scientificName, like, marineOnly, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaRecordsByNames
     *
     * @param scientificnames Names to search for (required)
     * @param like Add a &#x27;%&#x27;-sign after the ScientificName (SQL LIKE function). Default&#x3D;false (optional, default to false)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aphiaRecordsByNamesCall(List<String> scientificnames, Boolean like, Boolean marineOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/AphiaRecordsByNames";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scientificnames != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "scientificnames[]", scientificnames));
        if (like != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("like", like));
        if (marineOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marine_only", marineOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aphiaRecordsByNamesValidateBeforeCall(List<String> scientificnames, Boolean like, Boolean marineOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scientificnames' is set
        if (scientificnames == null) {
            throw new ApiException("Missing the required parameter 'scientificnames' when calling aphiaRecordsByNames(Async)");
        }
        
        com.squareup.okhttp.Call call = aphiaRecordsByNamesCall(scientificnames, like, marineOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * For each given scientific name, try to find one or more AphiaRecords
     * For each given scientific name, try to find one or more AphiaRecords. This allows you to match multiple names in one call. Limited to 500 names at once for performance reasons.
     *
     * @param scientificnames Names to search for (required)
     * @param like Add a &#x27;%&#x27;-sign after the ScientificName (SQL LIKE function). Default&#x3D;false (optional, default to false)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @return List&lt;AphiaRecord&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecord> aphiaRecordsByNames(List<String> scientificnames, Boolean like, Boolean marineOnly) throws ApiException {
        ApiResponse<List<AphiaRecord>> resp = aphiaRecordsByNamesWithHttpInfo(scientificnames, like, marineOnly);
        return resp.getData();
    }

    /**
     * For each given scientific name, try to find one or more AphiaRecords
     * For each given scientific name, try to find one or more AphiaRecords. This allows you to match multiple names in one call. Limited to 500 names at once for performance reasons.
     *
     * @param scientificnames Names to search for (required)
     * @param like Add a &#x27;%&#x27;-sign after the ScientificName (SQL LIKE function). Default&#x3D;false (optional, default to false)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @return ApiResponse&lt;List&lt;AphiaRecord&gt;&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecord>> aphiaRecordsByNamesWithHttpInfo(List<String> scientificnames, Boolean like, Boolean marineOnly) throws ApiException {
        com.squareup.okhttp.Call call = aphiaRecordsByNamesValidateBeforeCall(scientificnames, like, marineOnly, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * For each given scientific name, try to find one or more AphiaRecords (asynchronously)
     * For each given scientific name, try to find one or more AphiaRecords. This allows you to match multiple names in one call. Limited to 500 names at once for performance reasons.
     *
     * @param scientificnames Names to search for (required)
     * @param like Add a &#x27;%&#x27;-sign after the ScientificName (SQL LIKE function). Default&#x3D;false (optional, default to false)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aphiaRecordsByNamesAsync(List<String> scientificnames, Boolean like, Boolean marineOnly, final ApiCallback<List<AphiaRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aphiaRecordsByNamesValidateBeforeCall(scientificnames, like, marineOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaRecordsByTaxonRankID
     *
     * @param ID A taxonomic rank identifier (required)
     * @param belongsTo Limit the results to descendants of the given AphiaID (optional)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aphiaRecordsByTaxonRankIDCall(Integer ID, Integer belongsTo, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/AphiaRecordsByTaxonRankID/{ID}"
            .replaceAll("\\{" + "ID" + "\\}", apiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (belongsTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("belongsTo", belongsTo));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aphiaRecordsByTaxonRankIDValidateBeforeCall(Integer ID, Integer belongsTo, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling aphiaRecordsByTaxonRankID(Async)");
        }
        
        com.squareup.okhttp.Call call = aphiaRecordsByTaxonRankIDCall(ID, belongsTo, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the AphiaRecords for a given taxonRankID (max 50)
     * Get the AphiaRecords for a given taxonRankID (max 50)
     *
     * @param ID A taxonomic rank identifier (required)
     * @param belongsTo Limit the results to descendants of the given AphiaID (optional)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return List&lt;AphiaRecord&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecord> aphiaRecordsByTaxonRankID(Integer ID, Integer belongsTo, Integer offset) throws ApiException {
        ApiResponse<List<AphiaRecord>> resp = aphiaRecordsByTaxonRankIDWithHttpInfo(ID, belongsTo, offset);
        return resp.getData();
    }

    /**
     * Get the AphiaRecords for a given taxonRankID (max 50)
     * Get the AphiaRecords for a given taxonRankID (max 50)
     *
     * @param ID A taxonomic rank identifier (required)
     * @param belongsTo Limit the results to descendants of the given AphiaID (optional)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;AphiaRecord&gt;&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecord>> aphiaRecordsByTaxonRankIDWithHttpInfo(Integer ID, Integer belongsTo, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = aphiaRecordsByTaxonRankIDValidateBeforeCall(ID, belongsTo, offset, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the AphiaRecords for a given taxonRankID (max 50) (asynchronously)
     * Get the AphiaRecords for a given taxonRankID (max 50)
     *
     * @param ID A taxonomic rank identifier (required)
     * @param belongsTo Limit the results to descendants of the given AphiaID (optional)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aphiaRecordsByTaxonRankIDAsync(Integer ID, Integer belongsTo, Integer offset, final ApiCallback<List<AphiaRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aphiaRecordsByTaxonRankIDValidateBeforeCall(ID, belongsTo, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaSynonymsByAphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aphiaSynonymsByAphiaIDCall(Integer ID, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/AphiaSynonymsByAphiaID/{ID}"
            .replaceAll("\\{" + "ID" + "\\}", apiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aphiaSynonymsByAphiaIDValidateBeforeCall(Integer ID, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling aphiaSynonymsByAphiaID(Async)");
        }
        
        com.squareup.okhttp.Call call = aphiaSynonymsByAphiaIDCall(ID, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all synonyms for a given AphiaID
     * Get all synonyms for a given AphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return List&lt;AphiaRecord&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecord> aphiaSynonymsByAphiaID(Integer ID, Integer offset) throws ApiException {
        ApiResponse<List<AphiaRecord>> resp = aphiaSynonymsByAphiaIDWithHttpInfo(ID, offset);
        return resp.getData();
    }

    /**
     * Get all synonyms for a given AphiaID
     * Get all synonyms for a given AphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;AphiaRecord&gt;&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecord>> aphiaSynonymsByAphiaIDWithHttpInfo(Integer ID, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = aphiaSynonymsByAphiaIDValidateBeforeCall(ID, offset, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all synonyms for a given AphiaID (asynchronously)
     * Get all synonyms for a given AphiaID
     *
     * @param ID The AphiaID to search for (required)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aphiaSynonymsByAphiaIDAsync(Integer ID, Integer offset, final ApiCallback<List<AphiaRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aphiaSynonymsByAphiaIDValidateBeforeCall(ID, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaTaxonRanksByID
     *
     * @param ID A taxonomic rank identifier. Default&#x3D;-1 (required)
     * @param aphiaID The AphiaID of the kingdom (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aphiaTaxonRanksByIDCall(Integer ID, Integer aphiaID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/AphiaTaxonRanksByID/{ID}"
            .replaceAll("\\{" + "ID" + "\\}", apiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aphiaID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AphiaID", aphiaID));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aphiaTaxonRanksByIDValidateBeforeCall(Integer ID, Integer aphiaID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling aphiaTaxonRanksByID(Async)");
        }
        
        com.squareup.okhttp.Call call = aphiaTaxonRanksByIDCall(ID, aphiaID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get taxonomic ranks by their identifier
     * Get taxonomic ranks by their identifier
     *
     * @param ID A taxonomic rank identifier. Default&#x3D;-1 (required)
     * @param aphiaID The AphiaID of the kingdom (optional)
     * @return List&lt;AphiaRank&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRank> aphiaTaxonRanksByID(Integer ID, Integer aphiaID) throws ApiException {
        ApiResponse<List<AphiaRank>> resp = aphiaTaxonRanksByIDWithHttpInfo(ID, aphiaID);
        return resp.getData();
    }

    /**
     * Get taxonomic ranks by their identifier
     * Get taxonomic ranks by their identifier
     *
     * @param ID A taxonomic rank identifier. Default&#x3D;-1 (required)
     * @param aphiaID The AphiaID of the kingdom (optional)
     * @return ApiResponse&lt;List&lt;AphiaRank&gt;&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRank>> aphiaTaxonRanksByIDWithHttpInfo(Integer ID, Integer aphiaID) throws ApiException {
        com.squareup.okhttp.Call call = aphiaTaxonRanksByIDValidateBeforeCall(ID, aphiaID, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRank>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get taxonomic ranks by their identifier (asynchronously)
     * Get taxonomic ranks by their identifier
     *
     * @param ID A taxonomic rank identifier. Default&#x3D;-1 (required)
     * @param aphiaID The AphiaID of the kingdom (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aphiaTaxonRanksByIDAsync(Integer ID, Integer aphiaID, final ApiCallback<List<AphiaRank>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aphiaTaxonRanksByIDValidateBeforeCall(ID, aphiaID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRank>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaTaxonRanksByName
     *
     * @param taxonRank A taxonomic rank. Default&#x3D;empty (required)
     * @param aphiaID The AphiaID of the kingdom (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aphiaTaxonRanksByNameCall(String taxonRank, Integer aphiaID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/AphiaTaxonRanksByName/{taxonRank}"
            .replaceAll("\\{" + "taxonRank" + "\\}", apiClient.escapeString(taxonRank.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aphiaID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AphiaID", aphiaID));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aphiaTaxonRanksByNameValidateBeforeCall(String taxonRank, Integer aphiaID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'taxonRank' is set
        if (taxonRank == null) {
            throw new ApiException("Missing the required parameter 'taxonRank' when calling aphiaTaxonRanksByName(Async)");
        }
        
        com.squareup.okhttp.Call call = aphiaTaxonRanksByNameCall(taxonRank, aphiaID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get taxonomic ranks by their name
     * Get taxonomic ranks by their name
     *
     * @param taxonRank A taxonomic rank. Default&#x3D;empty (required)
     * @param aphiaID The AphiaID of the kingdom (optional)
     * @return List&lt;AphiaRank&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRank> aphiaTaxonRanksByName(String taxonRank, Integer aphiaID) throws ApiException {
        ApiResponse<List<AphiaRank>> resp = aphiaTaxonRanksByNameWithHttpInfo(taxonRank, aphiaID);
        return resp.getData();
    }

    /**
     * Get taxonomic ranks by their name
     * Get taxonomic ranks by their name
     *
     * @param taxonRank A taxonomic rank. Default&#x3D;empty (required)
     * @param aphiaID The AphiaID of the kingdom (optional)
     * @return ApiResponse&lt;List&lt;AphiaRank&gt;&gt;
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRank>> aphiaTaxonRanksByNameWithHttpInfo(String taxonRank, Integer aphiaID) throws ApiException {
        com.squareup.okhttp.Call call = aphiaTaxonRanksByNameValidateBeforeCall(taxonRank, aphiaID, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRank>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get taxonomic ranks by their name (asynchronously)
     * Get taxonomic ranks by their name
     *
     * @param taxonRank A taxonomic rank. Default&#x3D;empty (required)
     * @param aphiaID The AphiaID of the kingdom (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws org.marinespecies.aphia.v1_0.handler.ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aphiaTaxonRanksByNameAsync(String taxonRank, Integer aphiaID, final ApiCallback<List<AphiaRank>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aphiaTaxonRanksByNameValidateBeforeCall(taxonRank, aphiaID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRank>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
