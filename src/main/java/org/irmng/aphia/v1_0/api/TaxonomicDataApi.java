/*
 * IRMNG REST webservice
 * The definitions and operations are listed below. Click on an operation name to view it's details, and test it.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.irmng.aphia.v1_0.api;

import org.irmng.aphia.v1_0.handler.ApiCallback;
import org.irmng.aphia.v1_0.handler.ApiClient;
import org.irmng.aphia.v1_0.handler.ApiException;
import org.irmng.aphia.v1_0.handler.ApiResponse;
import org.irmng.aphia.v1_0.handler.Configuration;
import org.irmng.aphia.v1_0.handler.Pair;
import org.irmng.aphia.v1_0.handler.ProgressRequestBody;
import org.irmng.aphia.v1_0.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.irmng.aphia.v1_0.model.AphiaRank;
import org.irmng.aphia.v1_0.model.AphiaRecord;
import org.irmng.aphia.v1_0.model.AphiaRecordsArray;
import org.irmng.aphia.v1_0.model.Classification;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaxonomicDataApi {
    private ApiClient apiClient;

    public TaxonomicDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaxonomicDataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for aphiaChildrenByIRMNGID
     * @param ID The IRMNG_ID to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call aphiaChildrenByIRMNGIDCall(Integer ID, Boolean marineOnly, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AphiaChildrenByIRMNG_ID/{ID}"
            .replaceAll("\\{" + "ID" + "\\}", apiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marineOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marine_only", marineOnly));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aphiaChildrenByIRMNGIDValidateBeforeCall(Integer ID, Boolean marineOnly, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling aphiaChildrenByIRMNGID(Async)");
        }

        okhttp3.Call call = aphiaChildrenByIRMNGIDCall(ID, marineOnly, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the direct children (max. 50) for a given IRMNG_ID
     * Get the direct children (max. 50) for a given IRMNG_ID
     * @param ID The IRMNG_ID to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return List&lt;AphiaRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecord> aphiaChildrenByIRMNGID(Integer ID, Boolean marineOnly, Integer offset) throws ApiException {
        ApiResponse<List<AphiaRecord>> resp = aphiaChildrenByIRMNGIDWithHttpInfo(ID, marineOnly, offset);
        return resp.getData();
    }

    /**
     * Get the direct children (max. 50) for a given IRMNG_ID
     * Get the direct children (max. 50) for a given IRMNG_ID
     * @param ID The IRMNG_ID to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;AphiaRecord&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecord>> aphiaChildrenByIRMNGIDWithHttpInfo(Integer ID, Boolean marineOnly, Integer offset) throws ApiException {
        okhttp3.Call call = aphiaChildrenByIRMNGIDValidateBeforeCall(ID, marineOnly, offset, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the direct children (max. 50) for a given IRMNG_ID (asynchronously)
     * Get the direct children (max. 50) for a given IRMNG_ID
     * @param ID The IRMNG_ID to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call aphiaChildrenByIRMNGIDAsync(Integer ID, Boolean marineOnly, Integer offset, final ApiCallback<List<AphiaRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = aphiaChildrenByIRMNGIDValidateBeforeCall(ID, marineOnly, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaClassificationByIRMNGID
     * @param ID The IRMNG_ID to search for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call aphiaClassificationByIRMNGIDCall(Integer ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AphiaClassificationByIRMNG_ID/{ID}"
            .replaceAll("\\{" + "ID" + "\\}", apiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aphiaClassificationByIRMNGIDValidateBeforeCall(Integer ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling aphiaClassificationByIRMNGID(Async)");
        }

        okhttp3.Call call = aphiaClassificationByIRMNGIDCall(ID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the complete classification for one taxon. This also includes any sub or super ranks.
     * Get the complete classification for one taxon. This also includes any sub or super ranks.
     * @param ID The IRMNG_ID to search for (required)
     * @return Classification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Classification aphiaClassificationByIRMNGID(Integer ID) throws ApiException {
        ApiResponse<Classification> resp = aphiaClassificationByIRMNGIDWithHttpInfo(ID);
        return resp.getData();
    }

    /**
     * Get the complete classification for one taxon. This also includes any sub or super ranks.
     * Get the complete classification for one taxon. This also includes any sub or super ranks.
     * @param ID The IRMNG_ID to search for (required)
     * @return ApiResponse&lt;Classification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Classification> aphiaClassificationByIRMNGIDWithHttpInfo(Integer ID) throws ApiException {
        okhttp3.Call call = aphiaClassificationByIRMNGIDValidateBeforeCall(ID, null, null);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the complete classification for one taxon. This also includes any sub or super ranks. (asynchronously)
     * Get the complete classification for one taxon. This also includes any sub or super ranks.
     * @param ID The IRMNG_ID to search for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call aphiaClassificationByIRMNGIDAsync(Integer ID, final ApiCallback<Classification> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = aphiaClassificationByIRMNGIDValidateBeforeCall(ID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaNameByIRMNGID
     * @param ID The IRMNG_ID to search for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call aphiaNameByIRMNGIDCall(Integer ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AphiaNameByIRMNG_ID/{ID}"
            .replaceAll("\\{" + "ID" + "\\}", apiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aphiaNameByIRMNGIDValidateBeforeCall(Integer ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling aphiaNameByIRMNGID(Async)");
        }

        okhttp3.Call call = aphiaNameByIRMNGIDCall(ID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the name for a given IRMNG_ID
     * Get the name for a given IRMNG_ID
     * @param ID The IRMNG_ID to search for (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String aphiaNameByIRMNGID(Integer ID) throws ApiException {
        ApiResponse<String> resp = aphiaNameByIRMNGIDWithHttpInfo(ID);
        return resp.getData();
    }

    /**
     * Get the name for a given IRMNG_ID
     * Get the name for a given IRMNG_ID
     * @param ID The IRMNG_ID to search for (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> aphiaNameByIRMNGIDWithHttpInfo(Integer ID) throws ApiException {
        okhttp3.Call call = aphiaNameByIRMNGIDValidateBeforeCall(ID, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the name for a given IRMNG_ID (asynchronously)
     * Get the name for a given IRMNG_ID
     * @param ID The IRMNG_ID to search for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call aphiaNameByIRMNGIDAsync(Integer ID, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = aphiaNameByIRMNGIDValidateBeforeCall(ID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaRecordByIRMNGID
     * @param ID The IRMNG_ID to search for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call aphiaRecordByIRMNGIDCall(Integer ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AphiaRecordByIRMNG_ID/{ID}"
            .replaceAll("\\{" + "ID" + "\\}", apiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aphiaRecordByIRMNGIDValidateBeforeCall(Integer ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling aphiaRecordByIRMNGID(Async)");
        }

        okhttp3.Call call = aphiaRecordByIRMNGIDCall(ID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the complete AphiaRecord for a given IRMNG_ID
     * Get the complete AphiaRecord for a given IRMNG_ID
     * @param ID The IRMNG_ID to search for (required)
     * @return AphiaRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AphiaRecord aphiaRecordByIRMNGID(Integer ID) throws ApiException {
        ApiResponse<AphiaRecord> resp = aphiaRecordByIRMNGIDWithHttpInfo(ID);
        return resp.getData();
    }

    /**
     * Get the complete AphiaRecord for a given IRMNG_ID
     * Get the complete AphiaRecord for a given IRMNG_ID
     * @param ID The IRMNG_ID to search for (required)
     * @return ApiResponse&lt;AphiaRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AphiaRecord> aphiaRecordByIRMNGIDWithHttpInfo(Integer ID) throws ApiException {
        okhttp3.Call call = aphiaRecordByIRMNGIDValidateBeforeCall(ID, null, null);
        Type localVarReturnType = new TypeToken<AphiaRecord>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the complete AphiaRecord for a given IRMNG_ID (asynchronously)
     * Get the complete AphiaRecord for a given IRMNG_ID
     * @param ID The IRMNG_ID to search for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call aphiaRecordByIRMNGIDAsync(Integer ID, final ApiCallback<AphiaRecord> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = aphiaRecordByIRMNGIDValidateBeforeCall(ID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AphiaRecord>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaRecordsByDate
     * @param startdate ISO 8601 formatted start date(time). Default&#x3D;today(). i.e. 2022-09-09T14:41:06+00:00 (required)
     * @param enddate ISO 8601 formatted end date(time). Default&#x3D;today().i.e. 2022-09-09T14:41:06+00:00 (optional)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call aphiaRecordsByDateCall(OffsetDateTime startdate, OffsetDateTime enddate, Boolean marineOnly, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AphiaRecordsByDate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startdate", startdate));
        if (enddate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enddate", enddate));
        if (marineOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marine_only", marineOnly));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aphiaRecordsByDateValidateBeforeCall(OffsetDateTime startdate, OffsetDateTime enddate, Boolean marineOnly, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'startdate' is set
        if (startdate == null) {
            throw new ApiException("Missing the required parameter 'startdate' when calling aphiaRecordsByDate(Async)");
        }

        okhttp3.Call call = aphiaRecordsByDateCall(startdate, enddate, marineOnly, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all AphiaRecords (taxa) that have their last edit action (modified or added) during the specified period
     * Lists all AphiaRecords (taxa) that have their last edit action (modified or added) during the specified period
     * @param startdate ISO 8601 formatted start date(time). Default&#x3D;today(). i.e. 2022-09-09T14:41:06+00:00 (required)
     * @param enddate ISO 8601 formatted end date(time). Default&#x3D;today().i.e. 2022-09-09T14:41:06+00:00 (optional)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return List&lt;AphiaRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecord> aphiaRecordsByDate(OffsetDateTime startdate, OffsetDateTime enddate, Boolean marineOnly, Integer offset) throws ApiException {
        ApiResponse<List<AphiaRecord>> resp = aphiaRecordsByDateWithHttpInfo(startdate, enddate, marineOnly, offset);
        return resp.getData();
    }

    /**
     * Lists all AphiaRecords (taxa) that have their last edit action (modified or added) during the specified period
     * Lists all AphiaRecords (taxa) that have their last edit action (modified or added) during the specified period
     * @param startdate ISO 8601 formatted start date(time). Default&#x3D;today(). i.e. 2022-09-09T14:41:06+00:00 (required)
     * @param enddate ISO 8601 formatted end date(time). Default&#x3D;today().i.e. 2022-09-09T14:41:06+00:00 (optional)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;AphiaRecord&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecord>> aphiaRecordsByDateWithHttpInfo(OffsetDateTime startdate, OffsetDateTime enddate, Boolean marineOnly, Integer offset) throws ApiException {
        okhttp3.Call call = aphiaRecordsByDateValidateBeforeCall(startdate, enddate, marineOnly, offset, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all AphiaRecords (taxa) that have their last edit action (modified or added) during the specified period (asynchronously)
     * Lists all AphiaRecords (taxa) that have their last edit action (modified or added) during the specified period
     * @param startdate ISO 8601 formatted start date(time). Default&#x3D;today(). i.e. 2022-09-09T14:41:06+00:00 (required)
     * @param enddate ISO 8601 formatted end date(time). Default&#x3D;today().i.e. 2022-09-09T14:41:06+00:00 (optional)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call aphiaRecordsByDateAsync(OffsetDateTime startdate, OffsetDateTime enddate, Boolean marineOnly, Integer offset, final ApiCallback<List<AphiaRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = aphiaRecordsByDateValidateBeforeCall(startdate, enddate, marineOnly, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaRecordsByIRMNGIDs
     * @param aphiaids The IRMNG_IDs to search for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call aphiaRecordsByIRMNGIDsCall(List<Integer> aphiaids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AphiaRecordsByIRMNG_IDs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aphiaids != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "aphiaids[]", aphiaids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aphiaRecordsByIRMNGIDsValidateBeforeCall(List<Integer> aphiaids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'aphiaids' is set
        if (aphiaids == null) {
            throw new ApiException("Missing the required parameter 'aphiaids' when calling aphiaRecordsByIRMNGIDs(Async)");
        }

        okhttp3.Call call = aphiaRecordsByIRMNGIDsCall(aphiaids, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an AphiaRecord for multiple IRMNG_IDs in one go (max: 50)
     * Get an AphiaRecord for multiple IRMNG_IDs in one go (max: 50)
     * @param aphiaids The IRMNG_IDs to search for (required)
     * @return List&lt;AphiaRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecord> aphiaRecordsByIRMNGIDs(List<Integer> aphiaids) throws ApiException {
        ApiResponse<List<AphiaRecord>> resp = aphiaRecordsByIRMNGIDsWithHttpInfo(aphiaids);
        return resp.getData();
    }

    /**
     * Get an AphiaRecord for multiple IRMNG_IDs in one go (max: 50)
     * Get an AphiaRecord for multiple IRMNG_IDs in one go (max: 50)
     * @param aphiaids The IRMNG_IDs to search for (required)
     * @return ApiResponse&lt;List&lt;AphiaRecord&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecord>> aphiaRecordsByIRMNGIDsWithHttpInfo(List<Integer> aphiaids) throws ApiException {
        okhttp3.Call call = aphiaRecordsByIRMNGIDsValidateBeforeCall(aphiaids, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an AphiaRecord for multiple IRMNG_IDs in one go (max: 50) (asynchronously)
     * Get an AphiaRecord for multiple IRMNG_IDs in one go (max: 50)
     * @param aphiaids The IRMNG_IDs to search for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call aphiaRecordsByIRMNGIDsAsync(List<Integer> aphiaids, final ApiCallback<List<AphiaRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = aphiaRecordsByIRMNGIDsValidateBeforeCall(aphiaids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaRecordsByMatchNames
     * @param scientificnames Names to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call aphiaRecordsByMatchNamesCall(List<String> scientificnames, Boolean marineOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AphiaRecordsByMatchNames";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scientificnames != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "scientificnames[]", scientificnames));
        if (marineOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marine_only", marineOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aphiaRecordsByMatchNamesValidateBeforeCall(List<String> scientificnames, Boolean marineOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scientificnames' is set
        if (scientificnames == null) {
            throw new ApiException("Missing the required parameter 'scientificnames' when calling aphiaRecordsByMatchNames(Async)");
        }

        okhttp3.Call call = aphiaRecordsByMatchNamesCall(scientificnames, marineOnly, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Try to find AphiaRecords using the TAXAMATCH fuzzy matching algorithm by Tony Rees
     * For each given scientific name (may include authority), try to find one or more AphiaRecords, using the TAXAMATCH fuzzy matching algorithm by Tony Rees.&lt;br/&gt;This allows you to (fuzzy) match multiple names in one call. Limited to 50 names at once for performance reasons
     * @param scientificnames Names to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @return List&lt;AphiaRecordsArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecordsArray> aphiaRecordsByMatchNames(List<String> scientificnames, Boolean marineOnly) throws ApiException {
        ApiResponse<List<AphiaRecordsArray>> resp = aphiaRecordsByMatchNamesWithHttpInfo(scientificnames, marineOnly);
        return resp.getData();
    }

    /**
     * Try to find AphiaRecords using the TAXAMATCH fuzzy matching algorithm by Tony Rees
     * For each given scientific name (may include authority), try to find one or more AphiaRecords, using the TAXAMATCH fuzzy matching algorithm by Tony Rees.&lt;br/&gt;This allows you to (fuzzy) match multiple names in one call. Limited to 50 names at once for performance reasons
     * @param scientificnames Names to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @return ApiResponse&lt;List&lt;AphiaRecordsArray&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecordsArray>> aphiaRecordsByMatchNamesWithHttpInfo(List<String> scientificnames, Boolean marineOnly) throws ApiException {
        okhttp3.Call call = aphiaRecordsByMatchNamesValidateBeforeCall(scientificnames, marineOnly, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecordsArray>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Try to find AphiaRecords using the TAXAMATCH fuzzy matching algorithm by Tony Rees (asynchronously)
     * For each given scientific name (may include authority), try to find one or more AphiaRecords, using the TAXAMATCH fuzzy matching algorithm by Tony Rees.&lt;br/&gt;This allows you to (fuzzy) match multiple names in one call. Limited to 50 names at once for performance reasons
     * @param scientificnames Names to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call aphiaRecordsByMatchNamesAsync(List<String> scientificnames, Boolean marineOnly, final ApiCallback<List<AphiaRecordsArray>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = aphiaRecordsByMatchNamesValidateBeforeCall(scientificnames, marineOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecordsArray>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaRecordsByName
     * @param scientificName Name to search for (required)
     * @param like Add a &#x27;%&#x27;-sign added after the ScientificName (SQL LIKE function). Default&#x3D;true (optional, default to true)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call aphiaRecordsByNameCall(String scientificName, Boolean like, Boolean marineOnly, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AphiaRecordsByName/{ScientificName}"
            .replaceAll("\\{" + "ScientificName" + "\\}", apiClient.escapeString(scientificName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (like != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("like", like));
        if (marineOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marine_only", marineOnly));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aphiaRecordsByNameValidateBeforeCall(String scientificName, Boolean like, Boolean marineOnly, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scientificName' is set
        if (scientificName == null) {
            throw new ApiException("Missing the required parameter 'scientificName' when calling aphiaRecordsByName(Async)");
        }

        okhttp3.Call call = aphiaRecordsByNameCall(scientificName, like, marineOnly, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get one or more matching (max. 50) AphiaRecords for a given name
     * Get one or more matching (max. 50) AphiaRecords for a given name
     * @param scientificName Name to search for (required)
     * @param like Add a &#x27;%&#x27;-sign added after the ScientificName (SQL LIKE function). Default&#x3D;true (optional, default to true)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return List&lt;AphiaRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecord> aphiaRecordsByName(String scientificName, Boolean like, Boolean marineOnly, Integer offset) throws ApiException {
        ApiResponse<List<AphiaRecord>> resp = aphiaRecordsByNameWithHttpInfo(scientificName, like, marineOnly, offset);
        return resp.getData();
    }

    /**
     * Get one or more matching (max. 50) AphiaRecords for a given name
     * Get one or more matching (max. 50) AphiaRecords for a given name
     * @param scientificName Name to search for (required)
     * @param like Add a &#x27;%&#x27;-sign added after the ScientificName (SQL LIKE function). Default&#x3D;true (optional, default to true)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;AphiaRecord&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecord>> aphiaRecordsByNameWithHttpInfo(String scientificName, Boolean like, Boolean marineOnly, Integer offset) throws ApiException {
        okhttp3.Call call = aphiaRecordsByNameValidateBeforeCall(scientificName, like, marineOnly, offset, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get one or more matching (max. 50) AphiaRecords for a given name (asynchronously)
     * Get one or more matching (max. 50) AphiaRecords for a given name
     * @param scientificName Name to search for (required)
     * @param like Add a &#x27;%&#x27;-sign added after the ScientificName (SQL LIKE function). Default&#x3D;true (optional, default to true)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call aphiaRecordsByNameAsync(String scientificName, Boolean like, Boolean marineOnly, Integer offset, final ApiCallback<List<AphiaRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = aphiaRecordsByNameValidateBeforeCall(scientificName, like, marineOnly, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaRecordsByNames
     * @param scientificnames Names to search for (required)
     * @param like Add a &#x27;%&#x27;-sign after the ScientificName (SQL LIKE function). Default&#x3D;false (optional, default to false)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call aphiaRecordsByNamesCall(List<String> scientificnames, Boolean like, Boolean marineOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AphiaRecordsByNames";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scientificnames != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "scientificnames[]", scientificnames));
        if (like != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("like", like));
        if (marineOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marine_only", marineOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aphiaRecordsByNamesValidateBeforeCall(List<String> scientificnames, Boolean like, Boolean marineOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scientificnames' is set
        if (scientificnames == null) {
            throw new ApiException("Missing the required parameter 'scientificnames' when calling aphiaRecordsByNames(Async)");
        }

        okhttp3.Call call = aphiaRecordsByNamesCall(scientificnames, like, marineOnly, progressListener, progressRequestListener);
        return call;

    }

    /**
     * For each given scientific name, try to find one or more AphiaRecords
     * For each given scientific name, try to find one or more AphiaRecords. This allows you to match multiple names in one call. Limited to 500 names at once for performance reasons.
     * @param scientificnames Names to search for (required)
     * @param like Add a &#x27;%&#x27;-sign after the ScientificName (SQL LIKE function). Default&#x3D;false (optional, default to false)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @return List&lt;AphiaRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecord> aphiaRecordsByNames(List<String> scientificnames, Boolean like, Boolean marineOnly) throws ApiException {
        ApiResponse<List<AphiaRecord>> resp = aphiaRecordsByNamesWithHttpInfo(scientificnames, like, marineOnly);
        return resp.getData();
    }

    /**
     * For each given scientific name, try to find one or more AphiaRecords
     * For each given scientific name, try to find one or more AphiaRecords. This allows you to match multiple names in one call. Limited to 500 names at once for performance reasons.
     * @param scientificnames Names to search for (required)
     * @param like Add a &#x27;%&#x27;-sign after the ScientificName (SQL LIKE function). Default&#x3D;false (optional, default to false)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @return ApiResponse&lt;List&lt;AphiaRecord&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecord>> aphiaRecordsByNamesWithHttpInfo(List<String> scientificnames, Boolean like, Boolean marineOnly) throws ApiException {
        okhttp3.Call call = aphiaRecordsByNamesValidateBeforeCall(scientificnames, like, marineOnly, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * For each given scientific name, try to find one or more AphiaRecords (asynchronously)
     * For each given scientific name, try to find one or more AphiaRecords. This allows you to match multiple names in one call. Limited to 500 names at once for performance reasons.
     * @param scientificnames Names to search for (required)
     * @param like Add a &#x27;%&#x27;-sign after the ScientificName (SQL LIKE function). Default&#x3D;false (optional, default to false)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call aphiaRecordsByNamesAsync(List<String> scientificnames, Boolean like, Boolean marineOnly, final ApiCallback<List<AphiaRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = aphiaRecordsByNamesValidateBeforeCall(scientificnames, like, marineOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaRecordsByTaxonRankID
     * @param ID A taxonomic rank identifier (required)
     * @param belongsTo Limit the results to descendants of the given IRMNG_ID (optional)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call aphiaRecordsByTaxonRankIDCall(Integer ID, Integer belongsTo, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AphiaRecordsByTaxonRankID/{ID}"
            .replaceAll("\\{" + "ID" + "\\}", apiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (belongsTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("belongsTo", belongsTo));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aphiaRecordsByTaxonRankIDValidateBeforeCall(Integer ID, Integer belongsTo, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling aphiaRecordsByTaxonRankID(Async)");
        }

        okhttp3.Call call = aphiaRecordsByTaxonRankIDCall(ID, belongsTo, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the AphiaRecords for a given taxonRankID (max 50)
     * Get the AphiaRecords for a given taxonRankID (max 50)
     * @param ID A taxonomic rank identifier (required)
     * @param belongsTo Limit the results to descendants of the given IRMNG_ID (optional)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return List&lt;AphiaRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecord> aphiaRecordsByTaxonRankID(Integer ID, Integer belongsTo, Integer offset) throws ApiException {
        ApiResponse<List<AphiaRecord>> resp = aphiaRecordsByTaxonRankIDWithHttpInfo(ID, belongsTo, offset);
        return resp.getData();
    }

    /**
     * Get the AphiaRecords for a given taxonRankID (max 50)
     * Get the AphiaRecords for a given taxonRankID (max 50)
     * @param ID A taxonomic rank identifier (required)
     * @param belongsTo Limit the results to descendants of the given IRMNG_ID (optional)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;AphiaRecord&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecord>> aphiaRecordsByTaxonRankIDWithHttpInfo(Integer ID, Integer belongsTo, Integer offset) throws ApiException {
        okhttp3.Call call = aphiaRecordsByTaxonRankIDValidateBeforeCall(ID, belongsTo, offset, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the AphiaRecords for a given taxonRankID (max 50) (asynchronously)
     * Get the AphiaRecords for a given taxonRankID (max 50)
     * @param ID A taxonomic rank identifier (required)
     * @param belongsTo Limit the results to descendants of the given IRMNG_ID (optional)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call aphiaRecordsByTaxonRankIDAsync(Integer ID, Integer belongsTo, Integer offset, final ApiCallback<List<AphiaRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = aphiaRecordsByTaxonRankIDValidateBeforeCall(ID, belongsTo, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaSynonymsByIRMNGID
     * @param ID The IRMNG_ID to search for (required)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call aphiaSynonymsByIRMNGIDCall(Integer ID, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AphiaSynonymsByIRMNG_ID/{ID}"
            .replaceAll("\\{" + "ID" + "\\}", apiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aphiaSynonymsByIRMNGIDValidateBeforeCall(Integer ID, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling aphiaSynonymsByIRMNGID(Async)");
        }

        okhttp3.Call call = aphiaSynonymsByIRMNGIDCall(ID, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all synonyms for a given IRMNG_ID
     * Get all synonyms for a given IRMNG_ID
     * @param ID The IRMNG_ID to search for (required)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return List&lt;AphiaRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRecord> aphiaSynonymsByIRMNGID(Integer ID, Integer offset) throws ApiException {
        ApiResponse<List<AphiaRecord>> resp = aphiaSynonymsByIRMNGIDWithHttpInfo(ID, offset);
        return resp.getData();
    }

    /**
     * Get all synonyms for a given IRMNG_ID
     * Get all synonyms for a given IRMNG_ID
     * @param ID The IRMNG_ID to search for (required)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @return ApiResponse&lt;List&lt;AphiaRecord&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRecord>> aphiaSynonymsByIRMNGIDWithHttpInfo(Integer ID, Integer offset) throws ApiException {
        okhttp3.Call call = aphiaSynonymsByIRMNGIDValidateBeforeCall(ID, offset, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all synonyms for a given IRMNG_ID (asynchronously)
     * Get all synonyms for a given IRMNG_ID
     * @param ID The IRMNG_ID to search for (required)
     * @param offset Starting recordnumber, when retrieving next chunk of (50) records. Default&#x3D;1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call aphiaSynonymsByIRMNGIDAsync(Integer ID, Integer offset, final ApiCallback<List<AphiaRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = aphiaSynonymsByIRMNGIDValidateBeforeCall(ID, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaTaxonRanksByID
     * @param ID A taxonomic rank identifier. Default&#x3D;-1 (required)
     * @param IRMNG_ID The IRMNG_ID of the kingdom (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call aphiaTaxonRanksByIDCall(Integer ID, Integer IRMNG_ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AphiaTaxonRanksByID/{ID}"
            .replaceAll("\\{" + "ID" + "\\}", apiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (IRMNG_ID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("IRMNG_ID", IRMNG_ID));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aphiaTaxonRanksByIDValidateBeforeCall(Integer ID, Integer IRMNG_ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling aphiaTaxonRanksByID(Async)");
        }

        okhttp3.Call call = aphiaTaxonRanksByIDCall(ID, IRMNG_ID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get taxonomic ranks by their identifier
     * Get taxonomic ranks by their identifier
     * @param ID A taxonomic rank identifier. Default&#x3D;-1 (required)
     * @param IRMNG_ID The IRMNG_ID of the kingdom (optional)
     * @return List&lt;AphiaRank&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRank> aphiaTaxonRanksByID(Integer ID, Integer IRMNG_ID) throws ApiException {
        ApiResponse<List<AphiaRank>> resp = aphiaTaxonRanksByIDWithHttpInfo(ID, IRMNG_ID);
        return resp.getData();
    }

    /**
     * Get taxonomic ranks by their identifier
     * Get taxonomic ranks by their identifier
     * @param ID A taxonomic rank identifier. Default&#x3D;-1 (required)
     * @param IRMNG_ID The IRMNG_ID of the kingdom (optional)
     * @return ApiResponse&lt;List&lt;AphiaRank&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRank>> aphiaTaxonRanksByIDWithHttpInfo(Integer ID, Integer IRMNG_ID) throws ApiException {
        okhttp3.Call call = aphiaTaxonRanksByIDValidateBeforeCall(ID, IRMNG_ID, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRank>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get taxonomic ranks by their identifier (asynchronously)
     * Get taxonomic ranks by their identifier
     * @param ID A taxonomic rank identifier. Default&#x3D;-1 (required)
     * @param IRMNG_ID The IRMNG_ID of the kingdom (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call aphiaTaxonRanksByIDAsync(Integer ID, Integer IRMNG_ID, final ApiCallback<List<AphiaRank>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = aphiaTaxonRanksByIDValidateBeforeCall(ID, IRMNG_ID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRank>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for aphiaTaxonRanksByName
     * @param taxonRank A taxonomic rank. Default&#x3D;empty (required)
     * @param IRMNG_ID The IRMNG_ID of the kingdom (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call aphiaTaxonRanksByNameCall(String taxonRank, Integer IRMNG_ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/AphiaTaxonRanksByName/{taxonRank}"
            .replaceAll("\\{" + "taxonRank" + "\\}", apiClient.escapeString(taxonRank.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (IRMNG_ID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("IRMNG_ID", IRMNG_ID));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aphiaTaxonRanksByNameValidateBeforeCall(String taxonRank, Integer IRMNG_ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'taxonRank' is set
        if (taxonRank == null) {
            throw new ApiException("Missing the required parameter 'taxonRank' when calling aphiaTaxonRanksByName(Async)");
        }

        okhttp3.Call call = aphiaTaxonRanksByNameCall(taxonRank, IRMNG_ID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get taxonomic ranks by their name
     * Get taxonomic ranks by their name
     * @param taxonRank A taxonomic rank. Default&#x3D;empty (required)
     * @param IRMNG_ID The IRMNG_ID of the kingdom (optional)
     * @return List&lt;AphiaRank&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AphiaRank> aphiaTaxonRanksByName(String taxonRank, Integer IRMNG_ID) throws ApiException {
        ApiResponse<List<AphiaRank>> resp = aphiaTaxonRanksByNameWithHttpInfo(taxonRank, IRMNG_ID);
        return resp.getData();
    }

    /**
     * Get taxonomic ranks by their name
     * Get taxonomic ranks by their name
     * @param taxonRank A taxonomic rank. Default&#x3D;empty (required)
     * @param IRMNG_ID The IRMNG_ID of the kingdom (optional)
     * @return ApiResponse&lt;List&lt;AphiaRank&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AphiaRank>> aphiaTaxonRanksByNameWithHttpInfo(String taxonRank, Integer IRMNG_ID) throws ApiException {
        okhttp3.Call call = aphiaTaxonRanksByNameValidateBeforeCall(taxonRank, IRMNG_ID, null, null);
        Type localVarReturnType = new TypeToken<List<AphiaRank>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get taxonomic ranks by their name (asynchronously)
     * Get taxonomic ranks by their name
     * @param taxonRank A taxonomic rank. Default&#x3D;empty (required)
     * @param IRMNG_ID The IRMNG_ID of the kingdom (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call aphiaTaxonRanksByNameAsync(String taxonRank, Integer IRMNG_ID, final ApiCallback<List<AphiaRank>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = aphiaTaxonRanksByNameValidateBeforeCall(taxonRank, IRMNG_ID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AphiaRank>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for iRMNGIDByName
     * @param scientificName Name to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call iRMNGIDByNameCall(String scientificName, Boolean marineOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/IRMNG_IDByName/{ScientificName}"
            .replaceAll("\\{" + "ScientificName" + "\\}", apiClient.escapeString(scientificName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marineOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("marine_only", marineOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iRMNGIDByNameValidateBeforeCall(String scientificName, Boolean marineOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scientificName' is set
        if (scientificName == null) {
            throw new ApiException("Missing the required parameter 'scientificName' when calling iRMNGIDByName(Async)");
        }

        okhttp3.Call call = iRMNGIDByNameCall(scientificName, marineOnly, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the IRMNG_ID for a given name.
     * Get the IRMNG_ID for a given name.  Output: NULL when no match is found; -999 when multiple matches are found; an integer (IRMNG_ID) when one exact match was found
     * @param scientificName Name to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer iRMNGIDByName(String scientificName, Boolean marineOnly) throws ApiException {
        ApiResponse<Integer> resp = iRMNGIDByNameWithHttpInfo(scientificName, marineOnly);
        return resp.getData();
    }

    /**
     * Get the IRMNG_ID for a given name.
     * Get the IRMNG_ID for a given name.  Output: NULL when no match is found; -999 when multiple matches are found; an integer (IRMNG_ID) when one exact match was found
     * @param scientificName Name to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> iRMNGIDByNameWithHttpInfo(String scientificName, Boolean marineOnly) throws ApiException {
        okhttp3.Call call = iRMNGIDByNameValidateBeforeCall(scientificName, marineOnly, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the IRMNG_ID for a given name. (asynchronously)
     * Get the IRMNG_ID for a given name.  Output: NULL when no match is found; -999 when multiple matches are found; an integer (IRMNG_ID) when one exact match was found
     * @param scientificName Name to search for (required)
     * @param marineOnly Limit to marine taxa. Default&#x3D;true (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call iRMNGIDByNameAsync(String scientificName, Boolean marineOnly, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = iRMNGIDByNameValidateBeforeCall(scientificName, marineOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
